package org.mifosplatform.integrationtests;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.RestAssured.post;
import static com.jayway.restassured.path.json.JsonPath.from;
import static junit.framework.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;

import com.jayway.restassured.builder.RequestSpecBuilder;
import com.jayway.restassured.builder.ResponseSpecBuilder;
import com.jayway.restassured.http.ContentType;
import com.jayway.restassured.specification.RequestSpecification;
import com.jayway.restassured.specification.ResponseSpecification;
import org.mifosplatform.integrationtests.common.LoanApplicationTestBuilder;
import org.mifosplatform.integrationtests.common.LoanProductTestBuilder;
import org.mifosplatform.integrationtests.common.LoanStatusChecker;
import org.mifosplatform.integrationtests.common.Utils;

/**
 * Client Loan Integration Test for checking Loan Disbursement with Waive Interest and Write-Off.
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
public class LoanWithWaiveInterestAndWriteOff {

    ResponseSpecification responseSpec;
    RequestSpecification requestSpec;
    final String
            LP_PRINCIPAL = "12,000.00",
            LP_REPAYMENTS ="2",
            LP_REPAYMENT_PERIOD="6",
            LP_INTEREST_RATE="1",

            PRINCIPAL="4,500.00",
            LOAN_TERM_FREQUENCY="18",
            NUMBER_OF_REPAYMENTS="9",
            REPAYMENT_PERIOD="2",
            DISBURSEMENT_DATE="30 October 2010",
            LOAN_APPLICATION_SUBMISSION_DATE="23 September 2010",
            EXPECTED_DISBURSAL_DATE="28 October 2010",
            RATE_OF_INTEREST_PER_PERIOD="2",
            DATE_OF_JOINING = "04 March 2009",
            INTEREST_VALUE_AMOUNT = "40.00";

    @Before
    public void setup() {
        requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();
        requestSpec.header("Authorization","Basic "+ Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());
        responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();
    }

    @Test
    public void checkClientLoanCreateAndDisburseFlow(){
        //CREATE CLIENT
        Integer clientID = Utils.createClient(requestSpec, responseSpec, DATE_OF_JOINING);
        verifyClientCreatedOnServer(clientID);

        //CREATE LOAN PRODUCT
        Integer loanProductID = createLoanProduct();
        //APPLY FOR LOAN
        Integer loanID = applyForLoanApplication(clientID, loanProductID);
        HashMap loanStatusHashMap = getStatusOfLoan(loanID);

        LoanStatusChecker.verifyLoanIsPending(loanStatusHashMap);

        //APPROVE LOAN
        loanStatusHashMap = approveLoan("28 September 2010", loanID);
        LoanStatusChecker.verifyLoanIsApproved(loanStatusHashMap);
        LoanStatusChecker.verifyLoanIsWaitingForDisbursal(loanStatusHashMap);

        //UNDO APPROVAL
        loanStatusHashMap = undoApproval(loanID);
        LoanStatusChecker.verifyLoanIsPending(loanStatusHashMap);

        //RE-APPROVE LOAN ON 1 OCTOBER 2010
        loanStatusHashMap = approveLoan("1 October 2010", loanID);
        LoanStatusChecker.verifyLoanIsApproved(loanStatusHashMap);
        LoanStatusChecker.verifyLoanIsWaitingForDisbursal(loanStatusHashMap);

        //DISBURSE
        loanStatusHashMap = disburseLoan(loanID);
        System.out.println("DISBURSE "+loanStatusHashMap);
        LoanStatusChecker.verifyLoanIsActive(loanStatusHashMap);

        //PERFORM REPAYMENTS AND CHECK LOAN STATUS
        verifyRepaymentScheduleEntryFor(1, 4000.0F,loanID);
        makeRepayment(540.0f, "1 January 2011", loanID);
        makeRepayment(540.0f, "1 March 2011", loanID);
        waiveInterest("1 May 2011", loanID);
        makeRepayment(500.0f, "1 May 2011", loanID);
        makeRepayment(540.0f, "1 July 2011", loanID);
        waiveInterest("1 September 2011", loanID);
        makeRepayment(500.0f, "1 September 2011", loanID);
        makeRepayment(540.0f, "1 November 2011", loanID);
        waiveInterest("1 January 2012", loanID);
        makeRepayment(500.0f, "1 January 2012", loanID);
        verifyRepaymentScheduleEntryFor(7,1000.0f,loanID);

        //WRITE OFF LOAN AND CHECK ACCOUNT IS CLOSED
        LoanStatusChecker.verifyLoanAccountIsClosed(writeOffLoan("1 March 2012", loanID));

    }

    private void verifyRepaymentScheduleEntryFor(int repaymentNumber, float expectedPrincipalOutstanding ,Integer loanID) {
        ArrayList<HashMap> repaymentPeriods = getLoanRepaymentSchedule(loanID);
        assertEquals(repaymentPeriods.get(repaymentNumber).get("principalLoanBalanceOutstanding"), expectedPrincipalOutstanding);

    }

    private HashMap writeOffLoan(String transactionDate, Integer loanID){
        System.out.println("--------------------LOAN WRITTEN OFF ON "+transactionDate+"-------------------------------\n");
        String json = given().spec(requestSpec).body(Utils.getWriteOffBodyAsJSON(transactionDate))
                .expect().spec(responseSpec).log().ifError()
                .when().post("/mifosng-provider/api/v1/loans/" + loanID + "/transactions?command=writeoff&tenantIdentifier=default")
                .andReturn().asString();
        HashMap response = from(json).get("changes");
        return (HashMap)response.get("status");
    }

    private void waiveInterest(String transactionDate, Integer loanID){
        System.out.println("--------------------Waive INTEREST On "+transactionDate+"-------------------------------\n");
        given().spec(requestSpec).body(Utils.getWaiveBodyAsJSON(transactionDate, INTEREST_VALUE_AMOUNT))
                      .expect().spec(responseSpec).log().ifError()
                      .when().post("/mifosng-provider/api/v1/loans/" + loanID + "/transactions?command=waiveinterest&tenantIdentifier=default");
    }

    private void makeRepayment(Float transactionAmount, String transactionDate, Integer loanID){
        System.out.print("------------------------MADE REPAYMENT ON " + transactionDate + "---------------------------------\n");
        given().spec(requestSpec).body(Utils.getRepaymentBodyAsJSON(transactionDate, transactionAmount))
        .expect().spec(responseSpec).log().ifError()
        .when().post("/mifosng-provider/api/v1/loans/" + loanID + "/transactions?command=repayment&tenantIdentifier=default");
    }

    private ArrayList  getLoanRepaymentSchedule(Integer loanID)
    {
        System.out.println("---------------------------GETTING LOAN REPAYMENT SCHEDULE--------------------------------");
        String json = given().spec(requestSpec)
                .expect().spec(responseSpec).log().ifError()
                .when().get("/mifosng-provider/api/v1/loans/" + loanID +"?associations=repaymentSchedule&tenantIdentifier=default").andReturn().asString();
        HashMap repaymentSchedule = from(json).get("repaymentSchedule");
       return (ArrayList)repaymentSchedule.get("periods");
    }

    private HashMap getStatusOfLoan(Integer loanID){
        String json= given().spec(requestSpec)
                     .expect().spec(responseSpec).log().ifError()
                     .when().get("/mifosng-provider/api/v1/loans/" + loanID + "?tenantIdentifier=default")
                     .andReturn().asString();
        return from(json).get("status");
    }

    private HashMap undoApproval(Integer loanID){
        System.out.println("-----------------------------------UNDO LOAN APPROVAL-----------------------------------------");
        String json =  given().spec(requestSpec).body("{'note':'UNDO APPROVAL'}")
                    .expect().spec(responseSpec).log().ifError()
                    .when().post("/mifosng-provider/api/v1/loans/" + loanID + "?command=undoApproval&tenantIdentifier=default")
                    .andReturn().asString();
        HashMap response = from(json).get("changes");
        return (HashMap)response.get("status");
    }
    private HashMap disburseLoan(Integer loanID){
        System.out.println("-----------------------------------DISBURSE LOAN-----------------------------------------");
        String json =  given().spec(requestSpec).body(Utils.getDisburseLoanAsJSON(DISBURSEMENT_DATE))
                    .expect().spec(responseSpec).log().ifError()
                    .when().post("/mifosng-provider/api/v1/loans/" + loanID + "?command=disburse&tenantIdentifier=default")
                    .andReturn().asString();
        HashMap response = from(json).get("changes");
        return (HashMap)response.get("status");
    }

    private HashMap approveLoan(String approvalDate, Integer loanID){
        System.out.println("-----------------------------------APPROVE LOAN-----------------------------------------");
        String json =given().spec(requestSpec).body(Utils.getApproveLoanAsJSON(approvalDate))
                     .expect().spec(responseSpec).log().ifError()
                     .when().post("/mifosng-provider/api/v1/loans/"+ loanID +"?command=approve&tenantIdentifier=default")
                     .andReturn().asString();
        HashMap response = from(json).get("changes");
        return (HashMap)response.get("status");
    }


    private void verifyClientCreatedOnServer(final Integer generatedClientID) {
        System.out.println("------------------------------CHECK CLIENT DETAILS------------------------------------\n");
        given().spec(requestSpec)
                .expect().spec(responseSpec).log().ifError()
                .when().get("/mifosng-provider/api/v1/clients/" + generatedClientID + "?tenantIdentifier=default");
    }

    private Integer createLoanProduct() {
        System.out.println("------------------------------CREATING NEW LOAN PRODUCT ---------------------------------------");
        String loanProductJSON = new LoanProductTestBuilder()
                .withPrincipal(LP_PRINCIPAL)
                .withRepaymentTypeAsMonth()
                .withRepaymentAfterEvery(LP_REPAYMENT_PERIOD)
                .withNumberOfRepayments(LP_REPAYMENTS)
                .withRepaymentTypeAsMonth()
                .withinterestRatePerPeriod(LP_INTEREST_RATE)
                .withInterestRateFrequencyTypeAsMonths()
                .withAmortizationTypeAsEqualPrinciplePayment()
                .withInterestTypeAsFlat()
                .build();
        String json = given().spec(requestSpec).body(loanProductJSON)
                .expect().spec(responseSpec).log().ifError()
                .when().post("/mifosng-provider/api/v1/loanproducts?tenantIdentifier=default")
                .andReturn().asString();
        return from(json).get("resourceId");
    }

    private Integer applyForLoanApplication(final Integer clientID, final Integer loanProductID) {
        System.out.println("--------------------------------APPLYING FOR LOAN APPLICATION--------------------------------");
        String loanApplicationJSON = new LoanApplicationTestBuilder()
                .withPrincipal(PRINCIPAL)
                .withLoanTermFrequency(LOAN_TERM_FREQUENCY)
                .withLoanTermFrequencyAsMonths()
                .withNumberOfRepayments(NUMBER_OF_REPAYMENTS)
                .withRepaymentEveryAfter(REPAYMENT_PERIOD)
                .withRepaymentFrequencyTypeAsMonths()
                .withInterestRateFrequencyTypeAsMonths()
                .withInterestRatePerPeriod(RATE_OF_INTEREST_PER_PERIOD)
                .withInterestTypeAsFlatBalance()
                .withAmortizationTypeAsEqualInstallments()
                .withInterestCalculationPeriodTypeSameAsRepaymentPeriod()
                .withExpectedDisbursementDate(EXPECTED_DISBURSAL_DATE)
                .withSubmittedOnDate(LOAN_APPLICATION_SUBMISSION_DATE)
                .Build(clientID.toString(), loanProductID.toString());
        String json = given().spec(requestSpec).body(loanApplicationJSON)
                .expect().spec(responseSpec).log().ifError()
                .when().post("/mifosng-provider/api/v1/loans?tenantIdentifier=default")
                .andReturn().asString();
        return from(json).get("loanId");
    }
}






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































