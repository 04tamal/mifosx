package org.mifosplatform.integrationtests;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.RestAssured.post;
import static com.jayway.restassured.path.json.JsonPath.from;
import static junit.framework.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;


import org.junit.Before;
import org.junit.Test;

import com.google.gson.Gson;
import com.jayway.restassured.builder.RequestSpecBuilder;
import com.jayway.restassured.builder.ResponseSpecBuilder;
import com.jayway.restassured.http.ContentType;
import com.jayway.restassured.specification.RequestSpecification;
import com.jayway.restassured.specification.ResponseSpecification;
import org.mifosplatform.integrationtests.common.LoanApplicationTestBuilder;
import org.mifosplatform.integrationtests.common.LoanProductTestBuilder;
import org.mifosplatform.integrationtests.common.Utils;

/**
 * Client Loan Integration Test for checking Loan Application Repayment Schedule.
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
public class ClientLoanIntegrationTest {

    ResponseSpecification responseSpec;
    RequestSpecification requestSpec;

    @Before
    public void setup() {
        requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();
        requestSpec.header("Authorization","Basic "+ Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());
        responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();
    }

    @Test
    public void checkClientLoanCreateAndDisburseFlow(){
        Integer clientID = Utils.createClient(requestSpec, responseSpec);
        checkClientCreatedOnServer(clientID);

        Integer loanProductID = createLoanProduct();
        applyForLoanApplication(clientID, loanProductID);

        ArrayList <HashMap> loanSchedule = getLoanRepaymentSchedule(loanProductID);
        verifyLoanRepaymentSchedule(loanSchedule);

    }



    private void checkClientCreatedOnServer(final Integer generatedClientID) {
        System.out.println("------------------------------CHECK CLIENT DETAILS------------------------------------\n");
        given().spec(requestSpec)
        .expect().spec(responseSpec)
        .when().get("/mifosng-provider/api/v1/clients/" + generatedClientID + "?tenantIdentifier=default");
    }

    private Integer createLoanProduct() {
        System.out.println("------------------------------CREATING NEW LOAN PRODUCT ---------------------------------------");
        String loanProductJSON = new LoanProductTestBuilder()
                            .withPrincipal("12,000.00")
                            .withNumberOfRepayments("4")
                            .withRepaymentAfterEvery("1")
                            .withRepaymentTypeAsMonth()
                            .withinterestRatePerPeriod("2")
                            .withInterestRateFrequencyTypeAsMonths()
                            .withAmortizationTypeAsEqualInstallments()
                            .withInterestTypeAsDecliningBalance()
                            .withinterestRatePerPeriod("1")
                            .build();
        String json = given().spec(requestSpec).body(loanProductJSON)
                      .expect().spec(responseSpec)
                      .when().post("/mifosng-provider/api/v1/loanproducts?tenantIdentifier=default")
                      .andReturn().asString();
        return from(json).get("resourceId");
    }

    private void applyForLoanApplication(final Integer clientID, final Integer loanProductID) {
        System.out.println("--------------------------------APPLYING FOR LOAN APPLICATION--------------------------------");
        String loanApplicationJSON = new LoanApplicationTestBuilder()
                                     .withPrincipal("12,000.00")
                                     .withLoanTermFrequency("4")
                                     .withLoanTermFrequencyAsMonths()
                                     .withNumberOfRepayments("4")
                                     .withRepaymentEveryAfter("1")
                                     .withRepaymentFrequencyTypeAsMonths()
                                     .withInterestRatePerPeriod("2")
                                     .withInterestRateFrequencyTypeAsMonths()
                                     .withAmortizationTypeAsEqualInstallments()
                                     .withInterestTypeAsDecliningBalance()
                                     .withInterestCalculationPeriodTypeSameAsRepaymentPeriod()
                                     .withExpectedDisbursementDate("20 September 2011")
                                     .withSubmittedOnDate("20 September 2011")
                                     .Build(clientID.toString(),loanProductID.toString());
        given().spec(requestSpec).body(loanApplicationJSON)
        .expect().spec(responseSpec)
        .when().post("/mifosng-provider/api/v1/loans?tenantIdentifier=default");
    }

    private ArrayList  getLoanRepaymentSchedule(final Integer productID)
    {
        System.out.println("---------------------------GETTING LOAN REPAYMENT SCHEDULE--------------------------------");
       String json = given().spec(requestSpec).body(getLoanCalculationBodyAsJSON(productID.toString()))
                .expect().spec(responseSpec)
                .when().post("/mifosng-provider/api/v1/loans?command=calculateLoanSchedule&tenantIdentifier=default").andReturn().asString();
        return from(json).get("periods");
    }

    private void verifyLoanRepaymentSchedule(final ArrayList<HashMap> loanSchedule) {
        System.out.println("--------------------VERIFYING THE PRINCIPAL DUES,INTEREST DUE AND DUE DATE--------------------------");
        
        assertEquals("Checking for Due Date for 1st Month",new ArrayList<Integer>(Arrays.asList(2011, 10, 20)),loanSchedule.get(1).get("dueDate"));
        assertEquals("Checking for Principal Due for 1st Month", new Float("2911.49"), loanSchedule.get(1).get("principalOriginalDue"));
        assertEquals("Checking for Interest Due for 1st Month",new Float("240.00"),loanSchedule.get(1).get("interestOriginalDue"));

        assertEquals("Checking for Due Date for 2nd Month",new ArrayList<Integer>(Arrays.asList(2011,11,20)),loanSchedule.get(2).get("dueDate"));
        assertEquals("Checking for Principal Due for 2nd Month", new Float("2969.72"), loanSchedule.get(2).get("principalDue"));
        assertEquals("Checking for Interest Due for 2nd Month",new Float("181.77"),loanSchedule.get(2).get("interestOriginalDue"));

        assertEquals("Checking for Due Date for 3rd Month",new ArrayList<Integer>(Arrays.asList(2011,12,20)),loanSchedule.get(3).get("dueDate"));
        assertEquals("Checking for Principal Due for 3rd Month", new Float("3029.11"), loanSchedule.get(3).get("principalDue"));
        assertEquals("Checking for Interest Due for 3rd Month",new Float("122.38"),loanSchedule.get(3).get("interestOriginalDue"));

        assertEquals("Checking for Due Date for 4th Month",new ArrayList<Integer>(Arrays.asList(2012,1,20)),loanSchedule.get(4).get("dueDate"));
        assertEquals("Checking for Principal Due for 4th Month", new Float("3089.68"), loanSchedule.get(4).get("principalDue"));
        assertEquals("Checking for Interest Due for 4th Month",new Float("61.79"),loanSchedule.get(4).get("interestOriginalDue"));
    }




    private String getLoanCalculationBodyAsJSON(final String productID){
         HashMap<String, String> map = new HashMap<String, String>();
         map.put("dateFormat", "dd MMMM yyyy");
         map.put("locale", "en_GB");
         map.put("productId", productID);
         map.put("principal", "12,000.00");
         map.put("loanTermFrequency", "4");
         map.put("loanTermFrequencyType", "2");
         map.put("numberOfRepayments", "4");
         map.put("repaymentEvery", "1");
         map.put("repaymentFrequencyType", "2");
         map.put("interestRateFrequencyType", "2");
         map.put("interestRatePerPeriod", "2");
         map.put("amortizationType", "1");
         map.put("interestType", "0");
         map.put("interestCalculationPeriodType", "1");
         map.put("expectedDisbursementDate", "20 September 2011");
         map.put("transactionProcessingStrategyId", "1");
         return new Gson().toJson(map);
     }


}






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































