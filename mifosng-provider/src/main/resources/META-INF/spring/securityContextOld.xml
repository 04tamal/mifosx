<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
    xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth"
	xsi:schemaLocation="
   http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-3.1.xsd
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
   http://www.springframework.org/schema/security/oauth 
   http://www.springframework.org/schema/security/spring-security-oauth-1.0.xsd">

	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
    	<beans:constructor-arg value="256"/>
 	</beans:bean>
 	
 	<beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
    	<beans:property name="userPropertyToUse" value="id"/>
 	</beans:bean>
 	
	<beans:bean id="userDetailsService" class="org.mifosng.platform.security.PlatformUserDetailsServiceImpl" />
		
	<beans:bean id="customAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userDetailsService" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
		<beans:property name="saltSource" ref="saltSource" />
	</beans:bean>

	<beans:bean id="roleBasedAuthenticationSuccessHandler" class="org.mifosng.platform.infrastructure.FirstTimeLoginDetectionAuthenticationSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/home" />
        <beans:property name="alwaysUseDefaultTargetUrl" value="true" />
        <beans:property name="firstTimeLoginUrl" value="/firsttimelogin" />
    </beans:bean>
    
    <beans:bean id="customAuthenticationFalureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <beans:property name="defaultFailureUrl" value="/login" />
    </beans:bean>

	<beans:bean id="sessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy" />
	
	<beans:bean id="customAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="authenticationSuccessHandler" ref="roleBasedAuthenticationSuccessHandler" />
        <beans:property name="authenticationFailureHandler" ref="customAuthenticationFalureHandler" />
        <beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
    </beans:bean>
    
    <beans:bean id="mySecurityContextRepository" class="org.mifosng.oauth.InMemoryOAuthTokenAwareSecurityContextRepository">
    	<beans:constructor-arg ref="tokenServices"/>
    </beans:bean>
    
    <!-- 
    <beans:bean id="mySecurityContextPersistenceFilter" class="org.mifosng.oauth.OAuthTokenAwareSecurityContextPersistenceFilter">
    	<beans:constructor-arg ref="mySecurityContextRepository"/>
    </beans:bean>
    -->
    <global-method-security pre-post-annotations="enabled" />
    
    <http pattern="/" security="none" />
	<http pattern="/resources/**" security="none" />
	<http pattern="/api/open/**" security="none" />
	
	<beans:bean id="loginForm" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login" />
	</beans:bean>
	
	<!-- SecurityContext no longer stored in session -->
	<!--
	  on successful authentication, need to store token with association against authentication object
	 -->
	 
	<beans:bean id="requestCacheFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter" />
<!-- security-context-repository-ref="mySecurityContextRepository"  -->
	<http auto-config="false" create-session="always" use-expressions="true" pattern="/**" 
		entry-point-ref="loginForm" access-denied-page="/login" 
		>

		<intercept-url pattern="/login" access="isAnonymous()" />
		<intercept-url pattern="/logout" access="isAnonymous()" />
		<intercept-url pattern="/pentahoreport*" access="isAnonymous()" />
		<intercept-url pattern="/oauth/request_token" access="isAnonymous()" />
		<intercept-url pattern="/oauth/confirm_access" access="isFullyAuthenticated()" />
		<intercept-url pattern="/oauth/authorize" access="isFullyAuthenticated()" />
		<intercept-url pattern="/oauth/access_token" access="isFullyAuthenticated()" />
		<intercept-url pattern="/api/protected/**" access="isFullyAuthenticated()" />
		<intercept-url pattern="/**" access="isFullyAuthenticated()" />

		<!-- 
		<custom-filter ref="customAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="requestCacheFilter" after="FORM_LOGIN_FILTER"/>
		-->
		<logout logout-success-url="/logout" />
	</http>
	
	<beans:bean id="oauthProviderTokenServicesDelegate" class="org.mifosng.oauth.RemovableInMemoryProviderTokenServices" />
	
	<beans:bean id="tokenServices" class="org.mifosng.oauth.CustomTokenServices">
		<beans:constructor-arg ref="oauthProviderTokenServicesDelegate" />
	</beans:bean>
	
	<beans:bean id="consumerDetails" class="org.mifosng.oauth.MifosNgConsumerDetailsService" />
	
	<oauth:provider 
	 			  consumer-details-service-ref="consumerDetails"
                  token-services-ref="tokenServices"
                  request-token-url="/oauth/request_token"
                  authenticate-token-url="/oauth/authorize"
                  access-token-url="/oauth/access_token"
                  authentication-failed-url="/oauth/confirm_access"
                  access-granted-url="/request_token_authorized"
                  require10a="false"/>
	
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="customAuthenticationProvider" />
	</authentication-manager>

</beans:beans>
<!-- 
	<security:global-method-security pre-post-annotations="enabled" />
	<security:http pattern="/resources/**" security="none"/>
	<security:http pattern="/api/open/**" security="none"/>
	
	<security:http auto-config='true' access-denied-page="/login">
	
		<security:intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/logout" access="IS_AUTHENTICATED_ANONYMOUSLY" />	    
	    <security:intercept-url pattern="/oauth/**" access="ROLE_USER" />
	    <security:intercept-url pattern="/api/protected/**" access="ROLE_USER" />
	    <security:intercept-url pattern="/**" access="ROLE_USER" />

	    <security:form-login authentication-failure-url="/login" default-target-url="/index" login-page="/login" />
	    <security:logout logout-success-url="/logout" />
  	</security:http>
	-->
    
    <!-- 
    <bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<property name="securityContextRepository" ref="securityContextRepository" />
	</bean>
 
	<bean id="securityContextRepository" class="org.springframework.security.web.context.NullSecurityContextRepository" />
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
	    <constructor-arg value="/logout" />
	    <constructor-arg>
	        <list><bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" /></list>
	    </constructor-arg>
	</bean>
	
	<bean id="servletApiFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />

	<bean id="anonymousAuthenticationFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter" >
	    <property name="key" value="SomeUniqueKeyForThisApplication" />
	    <property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS" />
	</bean>
	 
	<bean id="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter" >
	    <constructor-arg ref="securityContextRepository" />
	</bean>
	 
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
	    <property name="authenticationEntryPoint" ref="loginForm" />
	</bean>
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
	    <property name="decisionVoters">
	        <list>
	            <bean class="org.springframework.security.access.vote.RoleVoter"/>
	            <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
	        </list>
	    </property>
	</bean>
	 
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
	    <property name="securityMetadataSource">
	        <security:filter-security-metadata-source>
	            <security:intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />
	            <security:intercept-url pattern="/logout" access="IS_AUTHENTICATED_ANONYMOUSLY" />
	            <security:intercept-url pattern="/signup" access="IS_AUTHENTICATED_ANONYMOUSLY" />
	            <security:intercept-url pattern="/pentahoreport*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
	            <security:intercept-url pattern="/oauth/**" access="IS_AUTHENTICATED_FULLY" />
	            <security:intercept-url pattern="/api/protected/**" access="IS_AUTHENTICATED_FULLY" />
	            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
	        </security:filter-security-metadata-source>
	    </property>
	    <property name="authenticationManager" ref="authenticationManager" />
	    <property name="accessDecisionManager" ref="accessDecisionManager" />
	</bean>
	-->
	<!--  org.springframework.security.oauth.provider.token.InMemorySelfCleaningProviderTokenServices -->
	<!-- 
	<bean id="oauthProviderTokenServicesDelegate" class="org.springframework.security.oauth.provider.token.InMemorySelfCleaningProviderTokenServices">
		<property name="cleanupIntervalSeconds" value="30" />
	</bean>
	-->
	<!-- 
	<bean id="oauthRequestTokenFilter" class="org.springframework.security.oauth.provider.filter.UnauthenticatedRequestTokenProcessingFilter">
		<property name="filterProcessesUrl" value="/oauth/request_token" />
		<property name="tokenServices" ref="oauthProviderTokenServices" />
		<property name="consumerDetailsService" ref="oauthConsumerDetailsService" />
	</bean>
	
	<bean id="oauthRandomValueVerifierServices" class="org.springframework.security.oauth.provider.verifier.RandomValueVerifierServices" />
	
	<bean id="oauthAuthorizationSuccessHandler" class="org.springframework.security.oauth.provider.filter.UserAuthorizationSuccessfulAuthenticationHandler" />
	
	<bean id="oauthUserAuthorizationFilter" class="org.springframework.security.oauth.provider.filter.UserAuthorizationProcessingFilter">
		<property name="filterProcessesUrl" value="/oauth/authorize" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="tokenServices" ref="oauthProviderTokenServices" />
		<property name="verifierServices" ref="oauthRandomValueVerifierServices" />
		<property name="authenticationSuccessHandler" ref="oauthAuthorizationSuccessHandler" />
	</bean>
	
	<bean id="oauthAccessTokenFilter" class="org.springframework.security.oauth.provider.filter.AccessTokenProcessingFilter">
		<property name="filterProcessesUrl" value="/oauth/access_token" />
		<property name="tokenServices" ref="oauthProviderTokenServices" />
		<property name="consumerDetailsService" ref="oauthConsumerDetailsService" />
	</bean>
	
	<bean id="oauthProtectedResourceFilter" class="org.mifosng.oauth.CustomProtectedResourceProcessingFilter">
		<property name="tokenServices" ref="oauthProviderTokenServices" />
		<property name="consumerDetailsService" ref="oauthConsumerDetailsService" />
	</bean>
	
	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
			<list>
				<filter-chain pattern="/resources/**" filters="none" />
				<filter-chain pattern="/api/open/**" filters="none" />
				
				<filter-chain pattern="/**" filters="securityContextPersistenceFilter, logoutFilter, customAuthenticationFilter,
				requestCacheFilter, servletApiFilter, anonymousAuthenticationFilter, sessionManagementFilter, exceptionTranslationFilter,
				oauthRequestTokenFilter, oauthUserAuthorizationFilter, oauthAccessTokenFilter, oauthProtectedResourceFilter,
				filterSecurityInterceptor" />
			</list>
		</constructor-arg>
	</bean>
	-->